name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test job
  test:
    name: "🧪 Run Tests & Build"
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint --if-present
    
    - name: Run type check
      run: npm run type-check --if-present
    
    - name: Run security audit
      run: npm audit --audit-level moderate || true
    
    - name: Build application
      run: npm run build
      env:
        CI: true

  # SonarQube Analysis
  sonarqube:
    name: "🔍 SonarQube Code Quality"
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
      env:
        CI: true
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectKey: Sumanth12-afk_be4youdeals-nextjs-app
        organization: sumanth12-afk

  # Build and push Docker image
  build-and-push:
    name: "🐳 Build & Push Docker Image"
    needs: sonarqube
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set image reference
      run: echo "IMAGE_BASE=${{ env.REGISTRY }}/${IMAGE_NAME,,}" >> $GITHUB_ENV
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_BASE }}
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
          type=ref,event=branch
          type=sha,prefix=sha-
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          SENTRY_ORG=${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT=${{ secrets.SENTRY_PROJECT }}
          SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_DSN=${{ secrets.SENTRY_DSN }}
          NEXT_PUBLIC_SENTRY_DSN=${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}
          SENTRY_RELEASE=${{ github.sha }}

  # Trivy Security Scan
  trivy-scan:
    name: "🛡️ Trivy Security Scan"
    needs: build-and-push
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set image reference
      run: echo "IMAGE_REF=${{ env.REGISTRY }}/${IMAGE_NAME,,}:latest" >> $GITHUB_ENV
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_REF }}
        format: table
        exit-code: 1
        vuln-type: 'os,library'
        severity: CRITICAL
        output: trivy-report.txt
    
    - name: Run Trivy SARIF scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_REF }}
        format: sarif
        vuln-type: 'os,library'
        severity: CRITICAL,HIGH
        output: trivy-results.sarif
    
    - name: Upload Trivy scan report
      uses: actions/upload-artifact@v4
      with:
        name: trivy-report
        path: trivy-report.txt
    
    - name: Upload SARIF results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif

  # Deploy to Netlify
  deploy-netlify:
    name: "🚀 Deploy to Netlify"
    needs: trivy-scan
    runs-on: ubuntu-latest
    
    environment:
      name: production
      url: https://vibricsdeals.netlify.app
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Configure Next.js for Netlify
      run: |
        # Temporarily switch to export mode for Netlify
        sed -i 's/output: '\''standalone'\''/output: '\''export'\''/' next.config.js
        sed -i '/images: {/,/},/c\
          images: {\
            unoptimized: true,\
            domains: [\
              '\''m.media-amazon.com'\'',\
              '\''images-na.ssl-images-amazon.com'\'',\
              '\''images.amazon.com'\''\
            ],\
          },' next.config.js
    
    - name: Build for Netlify
      run: npm run build
      env:
        CI: true
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        NEXT_PUBLIC_SENTRY_DSN: ${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}
        SENTRY_RELEASE: ${{ github.sha }}
    
    - name: Upload source maps to Sentry
      run: |
        npx @sentry/cli releases new ${{ github.sha }}
        npx @sentry/cli releases set-commits ${{ github.sha }} --auto
        npx @sentry/cli releases files ${{ github.sha }} upload-sourcemaps .next/static/chunks/ --url-prefix "~/_next/static/chunks/"
        npx @sentry/cli releases files ${{ github.sha }} upload-sourcemaps .next/static/css/ --url-prefix "~/_next/static/css/"
        npx @sentry/cli releases finalize ${{ github.sha }}
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
    
    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v2.0.0
      with:
        publish-dir: ./out
        production-deploy: true
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Automated deployment from GitHub Actions"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
    
    - name: Post deployment notification
      if: success()
      run: |
        echo "✅ Netlify deployment successful!"
        echo "🚀 Application is live at: https://vibricsdeals.netlify.app"
